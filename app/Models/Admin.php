<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Builder;

class Admin extends Model
{
    use SoftDeletes;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [
        'full_name',
        'department',
        'user_id'
    ];

    /**
     * The attributes that should be cast.
     */
    protected $casts = [
        'id' => 'string'
    ];

    /**
     * The attributes that should be appended to arrays.
     */
    protected $appends = [
        'profile_completion_percentage',
        'applications_managed_count',
        'reports_generated_count'
    ];

    // ================================
    // Relationships
    // ================================

    /**
     * Get the user that owns the admin profile.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Get the reports generated by this admin.
     */
    public function reports(): HasMany
    {
        return $this->hasMany(Report::class);
    }

    /**
     * Get applications reviewed by this admin.
     */
    public function reviewedApplications(): HasMany
    {
        return $this->hasMany(Application::class, 'reviewed_by', 'user_id');
    }

    /**
     * Get audit logs for this admin.
     */
    public function auditLogs(): HasMany
    {
        return $this->hasMany(AuditLog::class, 'user_id', 'user_id');
    }

    // ================================
    // Accessors & Mutators
    // ================================

    /**
     * Get profile completion percentage.
     */
    protected function profileCompletionPercentage(): Attribute
    {
        return Attribute::make(
            get: function () {
                $fields = [
                    'full_name' => !empty($this->full_name),
                    'department' => !empty($this->department),
                    'user_email' => !empty($this->user?->email),
                    'user_phone' => !empty($this->user?->phone_number),
                    'profile_picture' => !empty($this->user?->profile_picture_url),
                    'about_me' => !empty($this->user?->about_me),
                ];

                $completed = array_sum($fields);
                $total = count($fields);

                return round(($completed / $total) * 100);
            }
        );
    }

    /**
     * Get count of applications managed by this admin.
     */
    protected function applicationsManagedCount(): Attribute
    {
        return Attribute::make(
            get: fn () => $this->reviewedApplications()->count(),
        );
    }

    /**
     * Get count of reports generated by this admin.
     */
    protected function reportsGeneratedCount(): Attribute
    {
        return Attribute::make(
            get: fn () => $this->reports()->count(),
        );
    }

    /**
     * Format department name with proper casing.
     */
    protected function department(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => ucwords(strtolower($value)),
            set: fn ($value) => ucwords(strtolower($value)),
        );
    }

    // ================================
    // Scopes
    // ================================

    /**
     * Scope a query to only include active admins.
     */
    public function scopeActive(Builder $query): Builder
    {
        return $query->whereNull('deleted_at');
    }

    /**
     * Scope a query to filter by department.
     */
    public function scopeByDepartment(Builder $query, string $department): Builder
    {
        return $query->where('department', 'LIKE', "%{$department}%");
    }

    /**
     * Scope a query to include admins with activity.
     */
    public function scopeWithActivity(Builder $query): Builder
    {
        return $query->where(function ($q) {
            $q->whereHas('reviewedApplications')
              ->orWhereHas('reports')
              ->orWhereHas('auditLogs');
        });
    }

    // ================================
    // Helper Methods
    // ================================

    /**
     * Get admin's activity summary for a date range.
     */
    public function getActivitySummary(?\Carbon\Carbon $startDate = null, ?\Carbon\Carbon $endDate = null): array
    {
        $startDate = $startDate ?? now()->startOfMonth();
        $endDate = $endDate ?? now()->endOfMonth();

        $applicationsReviewed = $this->reviewedApplications()
            ->whereBetween('reviewed_at', [$startDate, $endDate])
            ->count();

        $reportsGenerated = $this->reports()
            ->whereBetween('generated_date', [$startDate, $endDate])
            ->count();

        $auditActions = $this->auditLogs()
            ->whereBetween('timestamp', [$startDate, $endDate])
            ->count();

        return [
            'applications_reviewed' => $applicationsReviewed,
            'reports_generated' => $reportsGenerated,
            'audit_actions' => $auditActions,
            'total_activities' => $applicationsReviewed + $reportsGenerated + $auditActions,
            'period' => [
                'start' => $startDate->format('Y-m-d'),
                'end' => $endDate->format('Y-m-d'),
            ]
        ];
    }

    /**
     * Get pending applications count for this admin's review.
     */
    public function getPendingApplicationsCount(): int
    {
        return Application::where('status', 'PENDING')->count();
    }

    /**
     * Get admin's performance metrics.
     */
    public function getPerformanceMetrics(): array
    {
        $totalReviewed = $this->reviewedApplications()->count();
        $approvedCount = $this->reviewedApplications()->where('status', 'APPROVED')->count();
        $rejectedCount = $this->reviewedApplications()->where('status', 'REJECTED')->count();

        $approvalRate = $totalReviewed > 0 ? ($approvedCount / $totalReviewed) * 100 : 0;

        $avgReviewTime = $this->reviewedApplications()
            ->whereNotNull('reviewed_at')
            ->whereNotNull('submission_date')
            ->selectRaw('AVG(TIMESTAMPDIFF(HOUR, submission_date, reviewed_at)) as avg_hours')
            ->value('avg_hours') ?? 0;

        return [
            'total_reviewed' => $totalReviewed,
            'approved_count' => $approvedCount,
            'rejected_count' => $rejectedCount,
            'approval_rate' => round($approvalRate, 2),
            'average_review_time_hours' => round($avgReviewTime, 2),
            'reports_generated' => $this->reports()->count(),
        ];
    }

    /**
     * Check if admin can perform specific actions.
     */
    public function canReviewApplications(): bool
    {
        return !empty($this->department) && $this->user?->email_verified_at !== null;
    }

    /**
     * Check if admin can generate reports.
     */
    public function canGenerateReports(): bool
    {
        return $this->canReviewApplications();
    }

    /**
     * Get recent activities.
     */
    public function getRecentActivities(int $limit = 10): \Illuminate\Support\Collection
    {
        $activities = collect();

        // Recent application reviews
        $recentReviews = $this->reviewedApplications()
            ->with('student')
            ->orderBy('reviewed_at', 'desc')
            ->limit($limit)
            ->get()
            ->map(function ($app) {
                return [
                    'type' => 'application_review',
                    'description' => "Reviewed application from {$app->student->full_name}",
                    'status' => $app->status,
                    'timestamp' => $app->reviewed_at,
                    'related_id' => $app->id,
                ];
            });

        // Recent reports
        $recentReports = $this->reports()
            ->orderBy('generated_date', 'desc')
            ->limit($limit)
            ->get()
            ->map(function ($report) {
                return [
                    'type' => 'report_generation',
                    'description' => "Generated {$report->type} report",
                    'status' => 'completed',
                    'timestamp' => $report->generated_date,
                    'related_id' => $report->id,
                ];
            });

        return $activities
            ->merge($recentReviews)
            ->merge($recentReports)
            ->sortByDesc('timestamp')
            ->take($limit)
            ->values();
    }

    /**
     * Get dashboard statistics for admin.
     */
    public function getDashboardStats(): array
    {
        return [
            'pending_applications' => $this->getPendingApplicationsCount(),
            'total_students' => Student::count(),
            'total_vendors' => Vendor::count(),
            'total_transactions_today' => Transaction::whereDate('transaction_date', today())->count(),
            'total_transactions_this_month' => Transaction::whereMonth('transaction_date', now()->month)->count(),
            'my_activities_this_month' => $this->getActivitySummary()['total_activities'],
            'system_health' => [
                'active_qr_codes' => QrCode::where('status', 'ACTIVE')->count(),
                'expired_qr_codes' => QrCode::where('status', 'EXPIRED')->count(),
                'failed_transactions' => Transaction::where('status', 'FAILED')->whereDate('transaction_date', today())->count(),
            ]
        ];
    }
}